using DataModel;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

using MQTTnet;
using MQTTnet.Client;
using MQTTnet.Client.Connecting;
using MQTTnet.Client.Disconnecting;
using MQTTnet.Client.Options;
using MQTTnet.Client.Receiving;
using Newtonsoft.Json.Linq;
using NModbus;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Threading;
using System.Threading.Tasks;

namespace PEIU.Hubbub.Services
{
    public class ModbusBackgroundService : BackgroundService
    {
        ILogger<ModbusBackgroundService> logger;
        IModbusFactory modbusFactory;
        IConfiguration config;
        MqttAddress[] mqtt_config;
        MqttClientProxyCollection mqtt_proxyCollection;
        ModbusSystem modbus;
        readonly static ConcurrentDictionary<int, DateTime> dtMap = new ConcurrentDictionary<int, DateTime>();
        private readonly object locker = new object();
        IMemoryCache cache;
        public ModbusBackgroundService(ILoggerFactory loggerFactory, IModbusFactory modbus_factory,
          
            IConfiguration configuration, ModbusSystem modbusSystem, IMemoryCache memoryCache)
        {
            logger = loggerFactory.CreateLogger<ModbusBackgroundService>();
            config = configuration;
            modbusFactory = modbus_factory;
            mqtt_config = configuration.GetSection("MQTTBrokers:DataBrokerAddress").Get<MqttAddress[]>();
            modbus = modbusSystem;
            cache = memoryCache;
        }

        public override async Task StartAsync(CancellationToken cancellationToken)
        {
            mqtt_proxyCollection = new MqttClientProxyCollection();
            foreach(MqttAddress address in mqtt_config)
            {
                IMqttClient client = await StartPublish(address);
                MqttClientProxy proxy = new MqttClientProxy(client, address);
                mqtt_proxyCollection.Add(proxy);
            }
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                
                //Console.WriteLine($"Entry TokenCancel: {stoppingToken.IsCancellationRequested}");
                if (stoppingToken.IsCancellationRequested)
                {
                    Console.WriteLine($"Stop Phase3. TokenCancel: {stoppingToken.IsCancellationRequested}");
                    break;
                }
                stoppingToken.ThrowIfCancellationRequested();
                //var parallelResult = Parallel.ForEach<GroupPoint>(modbus.GroupPoints, (async x =>
                foreach (var x in modbus.GroupPoints)
                {
                    
                    if (dtMap.ContainsKey(x.GroupId) == false)
                        dtMap[x.GroupId] = DateTime.MinValue;
                    if (DateTime.Now > dtMap[x.GroupId])
                    {
                        dtMap[x.GroupId] = DateTime.Now.Add(TimeSpan.FromSeconds(x.PollIntervalSec));
                        bool isConnected = modbusFactory.ReconnectWhenDisconnected();
                        if (isConnected == false)
                        {
                            logger.LogWarning("모드버스 접속에 실패했습니다.");
                            dtMap[x.GroupId] = DateTime.Now.Add(TimeSpan.FromSeconds(x.RetryIntervalSec));
                        }
                        JObject parentModel = modbusFactory.ReadModbusToJson(x);
                        if (parentModel == null)
                        {
                            dtMap[x.GroupId] = DateTime.Now.Add(TimeSpan.FromSeconds(x.RetryIntervalSec));
                            continue;
                        }

                        string topic = $"{modbus.DeviceName}/Analog/{x.GroupName}";
                        foreach (var mqtt_proxy in mqtt_proxyCollection)
                        {
                            try
                            {
                                var msg = CreateMqttMessage(topic, parentModel.ToString(), mqtt_proxy.Options.QosLevel);
                                var mqtt_client = mqtt_proxy.MqttClient;
                                if (mqtt_client.IsConnected)
                                {
                                    await mqtt_client.PublishAsync(msg);
                                    Console.WriteLine($"[{DateTime.Now}][{mqtt_client.Options.ChannelOptions}] Topic:{topic} Read Register = {x.GroupName}, Interval: {x.PollIntervalSec} sec");
                                }
                                else
                                {
                                    logger.LogError($"MQTT has not connected. {mqtt_client.Options.ChannelOptions}");
                                }
                                Thread.Sleep(1);
                            }
                            catch (Exception ex)
                            {
                                logger.LogError(ex, ex.Message);
                            }
                        }


                    }

                    Thread.Sleep(10);

                    //}));
                }
                //Console.WriteLine("ForEach Working...");
                //while (true)
                //{
                //    if (parallelResult.IsCompleted)
                //        break;
                //    Thread.Sleep(10);
                //}

                //Console.WriteLine("ForEach Completed");
                Thread.Sleep(1);
                //}
                //managedClient.sub
            }
            //Console.WriteLine("ExecuteAsync End");
            //foreach (var client in mqtt_clients)
            //    await client.MqttClient.DisconnectAsync();
            //modbusFactory.Dispose();
        }

        public override async Task StopAsync(CancellationToken cancellationToken)
        {
            Console.WriteLine("Completed");
            foreach (var client in mqtt_proxyCollection)
                await client.MqttClient.DisconnectAsync();
            modbusFactory.Dispose();
        }

        private MqttApplicationMessage CreateMqttMessage(string topic, string payload, int qos)
        {

            var applicationMessage = new MqttApplicationMessageBuilder()
                       .WithTopic(topic)
                       .WithPayload(payload)
                       .WithQualityOfServiceLevel((MQTTnet.Protocol.MqttQualityOfServiceLevel)qos)
                       .Build();
            return applicationMessage;
        }

        private async Task<IMqttClient> StartPublish(MqttAddress mqttOptions)
        {
            var ClientOptions = new MqttClientOptions
            {
                ClientId = mqttOptions.ClientId,
                ChannelOptions = new MqttClientTcpOptions
                {
                    Server = mqttOptions.BindAddress,
                    Port = mqttOptions.Port
                },

            };

            IMqttClient client = new MqttFactory().CreateMqttClient().UseDisconnectedHandler(Client_Disconnected);
           
            try
            {
                var result = await client.ConnectAsync(ClientOptions);
            }
            catch (Exception exception)
            {
                logger.LogError(exception, "### CONNECTING FAILED ###" + Environment.NewLine + exception);
            }
            return client;
        }

        private async Task Client_Disconnected(MqttClientDisconnectedEventArgs e)
        {
            if(e.Exception != null)
            {
                logger.LogError(e.Exception, e.Exception.Message);
            }
           
            ////logger.LogWarning($"### DISCONNECTED FROM SERVER. TRY CONNECT AFTER {mqttOptions.RecordInterval} ###");
            //await Task.Delay(mqttOptions.RecordInterval);

            //try
            //{
            //    var ClientOptions = new MqttClientOptions
            //    {
            //        ClientId = mqttOptions.ClientId,
            //        ChannelOptions = new MqttClientTcpOptions
            //        {
            //            Server = mqttOptions.BindAddress,
            //            Port = mqttOptions.Port
            //        }
            //    };
            //    await client.ConnectAsync(ClientOptions);
            //}
            //catch (Exception ex)
            //{
            //    _logger.LogError(ex, "### RECONNECTING FAILED ###");
            //}
        }

    }
}
